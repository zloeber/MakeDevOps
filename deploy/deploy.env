############################################################
## Application and other environment variables
############################################################
APP_NAME=makedevops
APP_PROCESS_NAME=makedevops
APP_TEAM=mdo
APP_COST_CENTER=12345
APP_ENV=dev
APP_VERSION=0.0.1
GOROOT=${HOME}/.go
GOPATH=${HOME}
GOBIN=${GOROOT}/bin
BINPATH=${HOME}/.local/bin

ANSIBLE_PATH=${HOME}/.ansible
ANSIBLE_CONFIG=${ANSIBLE_PATH}/ansible.cfg

## Some extrapolated values early (don't touch!)
PROJECT_NAME=${APP_TEAM}-${APP_NAME}-${APP_ENV}

CONTAINER_REGISTRY_URL=
DRAFT_REGISTRY_URL=${CONTAINER_REGISTRY_URL}
############################################################
## docker-compose
## See: https://docs.docker.com/compose/reference/envvars/#compose_path_separator
############################################################
COMPOSE_FILE=docker-compose.yml
COMPOSE_PROJECT_NAME=${PROJECT_NAME}

############################################################
## AWS
############################################################
AWS_DEFAULT_REGION=us-east-1
AWS_PROFILE=
AWS_ACCOUNT_ID=
AWS_ROUTE53_INT_ZONE=
AWS_ROUTE53_EXT_ZONE=
AWS_DEFAULT_VPC=
AWS_VOLUME_SIZE=

## Extrapolated AWS
AWS_KMS_NAME=
AWS_CLI_PROFILE=${AWS_PROFILE}
AWS_REGION=${AWS_DEFAULT_REGION}
AWS_CFSTACK_NAME=${PROJECT_NAME}
AWS_TAGS={Key=CostCenter,Value=${APP_COST_CENTER}},{Key=ProjectName,Value=${PROJECT_NAME}},{Key=ProcessName,Value=${APP_PROCESS_NAME}}

############################################################
## AWS ECS
############################################################
## The instance size will auto scale an existing deployment if 
## changed and you run make scale-ecs.
## This also gets applied to KOPS node size for k8s cluster builds.
ECS_INSTANCE_SIZE=3
ECS_TYPE=EC2
ECS_INSTANCE_TYPE=t2.micro
ECS_INT_ZONE=${AWS_ROUTE53_INT_ZONE}
ECS_EXT_ZONE=${AWS_ROUTE53_EXT_ZONE}
ECS_VPC_NAME=${AWS_DEFAULT_VPC}

## Two internal subnets, different subnet regions, same VPC
## us-east-1f
ECS_INT_SUBNET1="subnet-1"

## us-east-1e
ECS_INT_SUBNET2="subnet-2"

## Two external subnets, different subnet regions, same VPC
## us-east-1f
ECS_EXT_SUBNET1="subnet-a"

## us-east-1e
ECS_EXT_SUBNET2="subnet-b"

## Subnets must be from different regions and separated by spaces
ECS_SUBNETS="${ECS_INT_SUBNET1} ${ECS_INT_SUBNET2}"
ECS_ALL_SUBNETS="${ECS_INT_SUBNET1} ${ECS_INT_SUBNET2} ${ECS_EXT_SUBNET1} ${ECS_EXT_SUBNET2}"
ECS_LOADBALANCED_DOMAIN=${PROJECT_NAME}.${ECS_INT_ZONE}
ECS_CLUSTER_NAME=${PROJECT_NAME}
ECS_PROFILE=${AWS_PROFILE}
ECS_KEYPAIR=${PROJECT_NAME}-key
ECS_SERVICE_NAME=service-${PROJECT_NAME}
ECS_TASK_DEFINITION_NAME=td-${PROJECT_NAME}
ECS_ALB_NAME=alg-${PROJECT_NAME}
ECS_ALB_TARGETGROUP=tg-${PROJECT_NAME}
ECS_IAM_ROLE=${PROJECT_NAME}-role
ECS_IAM_ROLEPOLICY=${PROJECT_NAME}-rp
ECS_SG_NAME=${PROJECT_NAME}-sg

EC2_INTERNET_GATEWAY=ig-test

############################################################
## AWS ECR
############################################################
ECR_URI=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com
ECR_REPO_NAME=${PROJECT_NAME}
ECR_IMG_JENKINSMASTER=${ECR_URI}/${APP_TEAM}/${APP_NAME}-jenkinsmaster
ECR_IMG_JENKINSSLAVE=${ECR_URI}/${APP_TEAM}/${APP_NAME}-jenkinsslave

############################################################
## Kubernetes (kops, et cetera)
############################################################
# Set the Kubernetes version as found in the UCP Dashboard or API
K8S_VERSION=v1.11.2
K8S_CLUSTER_NAME=${PROJECT_NAME}-k8s
K8S_AWS_SECGROUP=${K8S_CLUSTER_NAME}-sg
K8S_VPC_NAME=${AWS_DEFAULT_VPC}

KOPS_AWS_DEPLOY_GROUP=deploy-kops-${PROJECT_NAME}
KOPS_AWS_DEPLOY_USER=deploy-kops-${PROJECT_NAME}
KOPS_ROUTE53_ZONE=${AWS_ROUTE53_INT_ZONE}
KOPS_STATE_STORE=s3://${PROJECT_NAME}-kops-state.${KOPS_ROUTE53_ZONE}
KOPS_CLUSTER_ZONES=us-east-1a
KOPS_CLUSTER_URI=${K8S_CLUSTER_NAME}.${KOPS_ROUTE53_ZONE}
KOPS_CLUSTER_API_URI=api.${K8S_CLUSTER_NAME}.${KOPS_ROUTE53_ZONE}
KOPS_ALLOW_AWS_DEPLOY=--yes
KOPS_ALLOW_AWS_DELETE=--yes

############################################################
## Jenkins
############################################################
JENKINS_IMG_MASTER=img-jenkinsmaster
JENKINS_IMG_MASTER_TAG=latest
JENKINS_IMG_SLAVE=img-jenkinsslave
JENKINS_IMG_SLAVE_TAG=latest
JENKINS_MASTER_URL=http://${PROJECT_NAME}-${JENKINS_IMG_MASTER}:${JENKINS_HTTP_PORT}
JENKINS_HTTP_PORT=8888
JENKINS_HTTPS_PORT=4443
JENKINS_AGENT_PORT=50000
JENKINS_SERVER=http://localhost:${JENKINS_HTTP_PORT}
JENKINS_ADMIN_USER=jenkins
JENKINS_ADMIN_PASS=admin
JENKINS_S3_BACKUP_PATH=${PROJECT_NAME}-backups
JENKINS_S3_BACKUP_PREFIX=jenkins-data
JENKINS_SSH_KEYPAIR=${ECS_KEYPAIR}
JENKINS_SUBNETS=${ECS_INT_ZONE}
JENKINS_SLAVE_AGENT_PORT=${JENKINS_AGENT_PORT}
JENKINS_OPTS='--argumentsRealm.passwd.admin=admin --argumentsRealm.roles.admin=admin'

## version of the Jenkins war file to install in the Docker container
JENKINS_DEPLOY_VERSION=2.138.1

## location hosting the war file you want to download
JENKINS_DEPLOY_WAR_SOURCE=./jenkins.war 

## path to the yml config files that will be copied to the docker container and consumed by the groovy init scripts
JENKINS_DEPLOY_CONFIG_PATH=./config/

## path the yml config file containing the desired plugin version names and versions to be installed prior to Jenkins initialization
JENKINS_DEPLOY_PLUGIN_CONFIG=./config/plugins.txt

## name of the docker container that gets created
JENKINS_DEPLOY_CONTAINER_NAME=${PROJECT_NAME}-${JENKINS_IMG_MASTER}

############################################################
## AWS SSM Parameter Store
############################################################
AWS_SSM_PS_PATH=${PROJECT_NAME}
AWS_SSM_PS_PROFILE=saml

## SSM_<NAME> get loaded as <NAME> from aws parameter
## store upon invoking the aws-ssm-load-params 
## task.
SSM_ARG_USERPASS=${PROJECT_NAME}/ARG_USERPASS

############################################################
## Other
############################################################
ARG_PROFILE=${AWS_PROFILE}
ARG_REGION=${AWS_DEFAULT_REGION}
